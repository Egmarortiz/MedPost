import * as React from 'react';
import { AbstractStyleSheet } from "./types.js";
interface CreateStyledOptions {
    getShouldForwardProp(cmp: React.ElementType): (prop: string) => boolean;
}
interface StyledOptions {
    shouldForwardProp?(prop: string): boolean;
}
type StyledProps = Record<string, unknown> & {
    as?: React.ElementType;
};
export declare function createStyled(StyleSheet: AbstractStyleSheet, options?: CreateStyledOptions): (component: React.ElementType, options?: StyledOptions) => (...rawStyles: any[]) => React.ForwardRefExoticComponent<Omit<StyledProps, "ref"> & React.RefAttributes<unknown>> & {
    withComponent: (newComponent: React.ElementType) => React.ForwardRefExoticComponent<Omit<StyledProps, "ref"> & React.RefAttributes<unknown>> & any;
};
export {};
